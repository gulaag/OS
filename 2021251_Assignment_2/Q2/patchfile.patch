diff --git b/linux-5.14.4/arch/x86/entry/syscalls/syscall_64.tbl a/linux-5.19.9/arch/x86/entry/syscalls/syscall_64.tbl
index f6b5779..e2b714e 100644
--- b/linux-5.14.4/arch/x86/entry/syscalls/syscall_64.tbl
+++ a/linux-5.14.4/arch/x86/entry/syscalls/syscall_64.tbl
@@ -369,7 +369,7 @@
 445	common	landlock_add_rule	sys_landlock_add_rule
 446	common	landlock_restrict_self	sys_landlock_restrict_self
 447	common	memfd_secret		sys_memfd_secret
-
+448 common  kernel_2d_memcpy    SYS_kernel_2d_memcpy
 #
 # Due to a historical design error, certain syscalls are numbered differently
 # in x32 as compared to native x86_64.  These syscalls have numbers 512-547.
diff --git b/linux-5.14.4/kernel/sys.c a/linux-5.14.4/kernel/sys.c
index ef1a78f..14c6cf3 100644
--- b/linux-5.14.4/kernel/sys.c
+++ a/linux-5.14.4/kernel/sys.c
@@ -199,7 +199,23 @@ static int set_one_prio(struct task_struct *p, int niceval, int error)
 out:
 	return error;
 }
-
+SYSCALL_DEFINE4(SYS_kernel_2d_memcpy, float *, kak, float *, kaka, int, row, int, col)
+{   float tempr[row][col];
+    int first = __copy_from_user(tempr, kaka, sizeof(tempr));
+    if (first){return -1;}
+    int second = __copy_to_user(kak, tempr, sizeof(tempr));
+    if (second){return -1;}
+    return 0;
+}
 SYSCALL_DEFINE3(setpriority, int, which, int, who, int, niceval)
 {
 	struct task_struct *g, *p;